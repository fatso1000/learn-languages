generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["views"]
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Levels {
    A1
    A2
    B1
    B2
    C1
    C2
}

enum Types {
    Listening
    Exercise
    Reading
}

model User {
    id           Int           @id @default(autoincrement())
    active       Boolean?
    created_at   DateTime      @default(now())
    email        String        @unique
    password     String
    name         String
    biography    String?
    location     String?
    profile      UserProfile   @relation(fields: [profile_id], references: [id])
    profile_id   Int           @unique
    user_content UserContent[]
    historical   Historical[]
    rank         UserRank?
    user_courses UserCourses[]
    lives_and_strikes             LivesAndStrikes   @relation(fields:[lives_and_strikes_id], references: [id])
    lives_and_strikes_id          Int               @unique
}

model LivesAndStrikes {
    id               Int          @id @default(autoincrement())
    user             User?
    lives            Int          @default(5)
    last_live_date   DateTime?
    strikes_length   Int          @default(0)
    last_strike_date DateTime?
}


model UserProfile {
    id          Int             @id @default(autoincrement())
    user        User?
    color       String
    animal_name String
    languages   UserLanguages[]
}

model UserLanguages {
    id              Int         @id @default(autoincrement())
    active          Boolean     @default(false)
    details         Languages   @relation(fields: [language_id], references: [id])
    language_id     Int
    user_profile    UserProfile @relation(fields: [user_profile_id], references: [id])
    user_profile_id Int
}

model Languages {
    id             Int             @id @default(autoincrement())
    name           String          @unique
    short_name     String
    content        Content[]
    user_languages UserLanguages[]
    courses        Courses?
}

// **************

model UserCourses {
    id               Int     @id @default(autoincrement())
    course_id        Int
    user_id          Int
    completed_levels Level[]
    course           Courses @relation(fields: [course_id], references: [id])
    user             User    @relation(fields: [user_id], references: [id])
}

model Courses {
    id                 Int           @id @default(autoincrement())
    language_id        Int           @unique
    target_language_id Int
    title              String
    description        String?
    language           Languages     @relation(fields: [language_id], references: [id])
    target_language    Json
    sections           Section[]
    user_courses       UserCourses[]
}

model Section {
    id          Int     @id @default(autoincrement())
    title       String
    description String?
    color       String?
    img_src     String?
    course      Courses @relation(fields: [courseId], references: [id])
    courseId    Int
    units       Unit[]
}

model Unit {
    id          Int        @id @default(autoincrement())
    title       String
    description String?
    section     Section    @relation(fields: [sectionId], references: [id])
    sectionId   Int
    color       String
    levels      Level[]
    exercise    Exercise[]
}

model Level {
    id              Int                @id @default(autoincrement())
    title           String
    description     String?
    difficulty      ExerciseDifficulty
    unit            Unit               @relation(fields: [unit_id], references: [id])
    unit_id         Int
    user_courses    UserCourses?       @relation(fields: [user_courses_id], references: [id])
    user_courses_id Int?
}

model Exercise {
    id                    Int                @id @default(autoincrement())
    difficulty            ExerciseDifficulty
    type                  ExerciseType
    prompt                String?
    choices               Json[]
    compact_translations  String[]
    solution_translations String?
    correct_solutions     String[]
    correct_answers       String[]
    display_tokens        Json[]
    correct_indices       Int[]
    correct_index         Int?
    tts                   String
    source_languages      String
    target_languages      String
    unit                  Unit               @relation(fields: [unit_id], references: [id])
    unit_id               Int
}

enum ExerciseType {
    Translation
    ChooseCorrect
    CompleteSentence
    Listening
    MultipleChoice
    WriteDown
}

enum ExerciseDifficulty {
    easy
    medium
    hard
}

// **************

model QuestionAndAnswer {
    id                 Int             @id @default(autoincrement())
    title              String
    options            String[]
    correct_answer     String
    content_details    ContentDetails? @relation(fields: [content_details_id], references: [id])
    content_details_id Int
}

model Ranks {
    id         Int        @id @default(autoincrement())
    name       String
    distintive String
    user       UserRank[]
}

model UserRank {
    rank            Ranks    @relation(fields: [rank_id], references: [id])
    rank_id         Int
    user            User     @relation(fields: [user_id], references: [id])
    user_id         Int      @unique
    created_at      DateTime @default(now())
    updated_at      DateTime @updatedAt
    user_experience Int

    @@id([rank_id, user_id])
}

// ---------------- ******************************** --------------------------------

model Content {
    id          Int              @id @default(autoincrement())
    title       String
    details     ContentDetails[]
    type        Types
    level       Levels
    language    Languages        @relation(fields: [language_id], references: [id])
    language_id Int
    historical  Historical[]
}

// AGREGAR FIELDS PARA AUDIO LISTENING Y EXERCISES
model ContentDetails {
    id                  Int                 @id @default(autoincrement())
    title               String
    description         String
    text                String[]
    level               Levels
    type                Types
    content             Content             @relation(fields: [content_id], references: [id])
    content_id          Int
    question_and_answer QuestionAndAnswer[]
    pending_content     PendingContent[]
    tts                 String?
}

model UserContent {
    id      Int              @id @default(autoincrement())
    content PendingContent[]
    user    User?            @relation(fields: [user_id], references: [id])
    user_id Int?
}

model PendingContent {
    id              Int            @id @default(autoincrement())
    pending_content ContentDetails @relation(fields: [pending_id], references: [id])
    user_content    UserContent    @relation(fields: [user_content_id], references: [id])
    marked_as_read  Boolean
    is_completed    Boolean
    user_content_id Int
    pending_id      Int
}

model Historical {
    id           Int      @id @default(autoincrement())
    user         User?    @relation(fields: [user_id], references: [id])
    user_id      Int?
    content      Content  @relation(fields: [content_id], references: [id])
    last_watched DateTime @default(now())
    content_id   Int
}
